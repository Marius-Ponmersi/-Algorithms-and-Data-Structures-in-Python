#  Найти сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,… Количество элементов (n) вводится с клавиатуры.

# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
# проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
# Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.

from memory_profiler import profile

summa = 1
el = 1


@profile
def sum_el(n: int):   # n - число элеметов списка
    global summa, el
    for i in range(1, n):
        el /= -2
        summa += el
    return f'Сумма элементов ряда: {summa}'


if __name__ == '__main__':
    sum_el(500)

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#      9     41.0 MiB     41.0 MiB           1   @profile
#     10                                         def sum_el(n: int):   # n - число элеметов списка
#     11                                             global summa, el
#     12     41.0 MiB      0.0 MiB         500       for i in range(1, n):
#     13     41.0 MiB      0.0 MiB         499           el /= -2
#     14     41.0 MiB      0.0 MiB         499           summa += el
#     15     41.0 MiB      0.0 MiB           1       return f'Сумма элементов ряда: {summa}'
