# Найти сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,… Количество элементов (n) вводится с клавиатуры.

# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
# проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
# Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.

from memory_profiler import profile


@profile
def sum_el(n: int):  # n - число элеметов списка
    def el(n):
        if n == 1:
            return n
        return (el(n - 1)) * (-0.5)
    return sum(el(i) for i in range(1, n+1))


if __name__ == '__main__':
    sum_el(500)

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#      5     40.8 MiB     40.8 MiB           1   @profile
#      6                                         def sum_el(n: int):  # n - число элеметов списка
#      7     41.7 MiB      0.9 MiB      125251       def el(n):
#      8     41.7 MiB      0.0 MiB      125250           if n == 1:
#      9     41.7 MiB      0.0 MiB         500               return n
#     10     41.7 MiB      0.0 MiB      124750           return (el(n - 1)) * (-0.5)
#     11     41.7 MiB      0.0 MiB        1003       return sum(el(i) for i in range(1, n+1))

# Вывод: по потреблению памяти самый оптимальный вариант: 1a.
