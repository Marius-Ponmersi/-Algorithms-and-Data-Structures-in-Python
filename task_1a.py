#  Найти сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,… Количество элементов (n) вводится с клавиатуры.

# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
# проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
# Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.

from memory_profiler import profile
# import sys
# print(sys.version, sys.platform)
summa = 0


@profile
def sum_el(n: int):   # n - число элеметов списка
    global summa
    n_first = n
    while True:
        el = (-0.5) ** (n - 1)
        summa = summa + el
        n -= 1
        if n == 0:
            return f'Сумма {n_first} элементов ряда равна: {summa}'


if __name__ == '__main__':
    sum_el(500)

# 3.9.4 (tags/v3.9.4:1f2e308, Apr  6 2021, 13:40:21) [MSC v.1928 64 bit (AMD64)] win32

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#      8     40.8 MiB     40.8 MiB           1   @profile
#      9                                         def sum_el(n: int):   # n - число элеметов списка
#     10                                             global summa
#     11     40.8 MiB      0.0 MiB           1       n_first = n
#     12                                             while True:
#     13     40.8 MiB      0.0 MiB         500           el = (-0.5) ** (n - 1)
#     14     40.8 MiB      0.0 MiB         500           summa = summa + el
#     15     40.8 MiB      0.0 MiB         500           n -= 1
#     16     40.8 MiB      0.0 MiB         500           if n == 0:
#     17     40.8 MiB      0.0 MiB           1               return f'Сумма {n_first} элементов ряда равна: {summa}'
